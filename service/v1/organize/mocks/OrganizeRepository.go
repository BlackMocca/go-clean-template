// Code generated by mockery v2.14.0. DO NOT EDIT.

package mocks

import (
	context "context"

	backendmodels "git.innovasive.co.th/backend/models"

	mock "github.com/stretchr/testify/mock"

	models "github.com/Blackmocca/go-clean-template/models"

	sync "sync"

	uuid "github.com/gofrs/uuid"
)

// OrganizeRepository is an autogenerated mock type for the OrganizeRepository type
type OrganizeRepository struct {
	mock.Mock
}

// Create provides a mock function with given fields: ctx, _a1
func (_m *OrganizeRepository) Create(ctx context.Context, _a1 *models.Organize) error {
	ret := _m.Called(ctx, _a1)

	var r0 error
	if rf, ok := ret.Get(0).(func(context.Context, *models.Organize) error); ok {
		r0 = rf(ctx, _a1)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// FetchAll provides a mock function with given fields: ctx, args, paginator
func (_m *OrganizeRepository) FetchAll(ctx context.Context, args *sync.Map, paginator *backendmodels.Paginator) ([]*models.Organize, error) {
	ret := _m.Called(ctx, args, paginator)

	var r0 []*models.Organize
	if rf, ok := ret.Get(0).(func(context.Context, *sync.Map, *backendmodels.Paginator) []*models.Organize); ok {
		r0 = rf(ctx, args, paginator)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).([]*models.Organize)
		}
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(context.Context, *sync.Map, *backendmodels.Paginator) error); ok {
		r1 = rf(ctx, args, paginator)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// FetchOneById provides a mock function with given fields: ctx, orgId
func (_m *OrganizeRepository) FetchOneById(ctx context.Context, orgId *uuid.UUID) (*models.Organize, error) {
	ret := _m.Called(ctx, orgId)

	var r0 *models.Organize
	if rf, ok := ret.Get(0).(func(context.Context, *uuid.UUID) *models.Organize); ok {
		r0 = rf(ctx, orgId)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*models.Organize)
		}
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(context.Context, *uuid.UUID) error); ok {
		r1 = rf(ctx, orgId)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

type mockConstructorTestingTNewOrganizeRepository interface {
	mock.TestingT
	Cleanup(func())
}

// NewOrganizeRepository creates a new instance of OrganizeRepository. It also registers a testing interface on the mock and a cleanup function to assert the mocks expectations.
func NewOrganizeRepository(t mockConstructorTestingTNewOrganizeRepository) *OrganizeRepository {
	mock := &OrganizeRepository{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}
