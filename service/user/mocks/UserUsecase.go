// Code generated by mockery v2.8.0. DO NOT EDIT.

package mocks

import (
	sync "sync"

	models "github.com/BlackMocca/go-clean-template/models"
	mock "github.com/stretchr/testify/mock"

	uuid "github.com/gofrs/uuid"
)

// UserUsecase is an autogenerated mock type for the UserUsecase type
type UserUsecase struct {
	mock.Mock
}

// Create provides a mock function with given fields: _a0
func (_m *UserUsecase) Create(_a0 *models.User) error {
	ret := _m.Called(_a0)

	var r0 error
	if rf, ok := ret.Get(0).(func(*models.User) error); ok {
		r0 = rf(_a0)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// FetchAll provides a mock function with given fields: args
func (_m *UserUsecase) FetchAll(args *sync.Map) ([]*models.User, error) {
	ret := _m.Called(args)

	var r0 []*models.User
	if rf, ok := ret.Get(0).(func(*sync.Map) []*models.User); ok {
		r0 = rf(args)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).([]*models.User)
		}
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(*sync.Map) error); ok {
		r1 = rf(args)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// FetchOneById provides a mock function with given fields: id
func (_m *UserUsecase) FetchOneById(id *uuid.UUID) (*models.User, error) {
	ret := _m.Called(id)

	var r0 *models.User
	if rf, ok := ret.Get(0).(func(*uuid.UUID) *models.User); ok {
		r0 = rf(id)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*models.User)
		}
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(*uuid.UUID) error); ok {
		r1 = rf(id)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}
