// Code generated by mockery v2.2.1. DO NOT EDIT.

package mocks

import (
	models "github.com/BlackMocca/go-clean-template/models"
	mock "github.com/stretchr/testify/mock"
)

// PsqlUserRepositoryInf is an autogenerated mock type for the PsqlUserRepositoryInf type
type PsqlUserRepositoryInf struct {
	mock.Mock
}

// Create provides a mock function with given fields: _a0
func (_m *PsqlUserRepositoryInf) Create(_a0 *models.User) error {
	ret := _m.Called(_a0)

	var r0 error
	if rf, ok := ret.Get(0).(func(*models.User) error); ok {
		r0 = rf(_a0)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// FetchAll provides a mock function with given fields:
func (_m *PsqlUserRepositoryInf) FetchAll() ([]*models.User, error) {
	ret := _m.Called()

	var r0 []*models.User
	if rf, ok := ret.Get(0).(func() []*models.User); ok {
		r0 = rf()
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).([]*models.User)
		}
	}

	var r1 error
	if rf, ok := ret.Get(1).(func() error); ok {
		r1 = rf()
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// FetchOneById provides a mock function with given fields: id
func (_m *PsqlUserRepositoryInf) FetchOneById(id int64) (*models.User, error) {
	ret := _m.Called(id)

	var r0 *models.User
	if rf, ok := ret.Get(0).(func(int64) *models.User); ok {
		r0 = rf(id)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*models.User)
		}
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(int64) error); ok {
		r1 = rf(id)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}
